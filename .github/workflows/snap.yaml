name: Build Spark client snap and run tests

env:
  RELEASE: edge
  SNAP_VERSION: '3.3.1'
  BRANCH: ${{ github.ref_name }}

on:
  push:
    branches:
      - '**'
      - '!main'
  schedule:
    - cron: '30 10 * * *'

jobs:
  build-condition:
    name: Check build condition for Snap
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        python-version:
          - '3.9'
          - '3.10'
    outputs:
      decision: ${{ steps.latest-version.outputs.decision }}
      version: ${{ steps.latest-version.outputs.version }}
    steps:
      - id: checkout
        name: Checkout repo
        uses: actions/checkout@v3
        with:
          ref: ${{ env.BRANCH }}
      - id: setup-python
        name: Setup Python
        uses: actions/setup-python@v2.2.2
        with:
          python-version: ${{matrix.python-version}}
          architecture: x64
      - id: code-checks
        name: Make sure the code follows conventions and tests correctly
        run: |
          make checks
      - id: published-version
        name: Read last published stable Spark version
        uses: juliangruber/read-file-action@v1
        with:
          path: ./SPARK_VERSION
      - id: latest-version
        name: Check latest stable version available for download
        run: |
          LATEST_STABLE_SPARK_VERSION=$(curl --silent https://downloads.apache.org/spark/ | grep "spark-" | cut -d'>' -f3 | cut -d'/' -f1  | sort | tail -n 1)
          CURRENT_PUBLISHED_VERSION=${{ steps.published-version.outputs.content }}
          LATEST_AVAILABLE_VERSION=${LATEST_STABLE_SPARK_VERSION:6}
          STATUSCODE=$(curl --silent --head https://downloads.apache.org/spark/${LATEST_STABLE_SPARK_VERSION}/${LATEST_STABLE_SPARK_VERSION}-bin-hadoop3.tgz | head -n 1 | cut -d' ' -f2)
          if  [[ ${LATEST_AVAILABLE_VERSION} != ${CURRENT_PUBLISHED_VERSION} ]] && [[ ${STATUSCODE} -eq 200 ]]
            then 
              echo "::set-output name=decision::1"
              echo "Allowed to publish....."
            else
              echo "::set-output name=decision::0"
              echo "Do NOT publish!"
          fi
          echo "::set-output name=version::${LATEST_AVAILABLE_VERSION}"
  build:
    name: Build Snap
    if: needs.build-condition.outputs.decision  ==  '1' || github.event_name == 'push' || github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs:
      - build-condition
    outputs:
      snap-file: ${{ steps.build-snap.outputs.snap }}
    steps:
      - id: checkout
        name: Checkout repo
        uses: actions/checkout@v3
        with:
          ref: ${{ env.BRANCH }}
      - id: build-snap
        name: Build snap
        uses: snapcore/action-build@v1
        with:
          snapcraft-channel: 7.x/candidate
      - id: upload
        name: Upload built snap job artifact
        uses: actions/upload-artifact@v3
        with:
          name: spark-client_snap_amd64
          path: spark-client_${{ env.SNAP_VERSION }}_amd64.snap

  test:
    name: Test Snap
    if: needs.build-condition.outputs.decision  ==  '1' || github.event_name == 'push' || github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs:
      - build-condition
      - build
    steps:
      - name: Download snap file
        uses: actions/download-artifact@v3
        with:
          name: spark-client_snap_amd64
          path: .

      - name: Install snap file
        run: |
          sudo snap install spark-client_${{ env.SNAP_VERSION }}_amd64.snap --dangerous

      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          ref: ${{ env.BRANCH }}

      - name: Run Integration Tests
        run: |
          make integration-tests

  publish:
    name: Publish Snap
    if: needs.build-condition.outputs.decision  ==  '1' && github.event_name == 'schedule'
    runs-on: ubuntu-latest
    needs:
      - build-condition
      - build
      - test
    steps:
      - name: Download snap file
        uses: actions/download-artifact@v3
        with:
          name: spark-client_snap_amd64
          path: .
      - name: Publish snap to Store
        uses: snapcore/action-publish@v1
        env:
          SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.STORE_LOGIN }}
        with:
          snap: spark-client_${{ env.SNAP_VERSION }}_amd64.snap
          release: ${{ env.RELEASE }}
      - name: Checkout SPARK_VERSION file
        uses: actions/checkout@v3
        with:
          ref: ${{ env.BRANCH }}
      - name: Record the published Spark version in SPARK_VERSION file
        uses: DamianReeves/write-file-action@master
        with:
          path: ./SPARK_VERSION
          write-mode: overwrite
          contents: |
            ${{ needs.build-condition.outputs.version }}
      - name: Commit updated SPARK_VERSION file
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: Published snap for latest Spark version ${{ needs.build-condition.outputs.version }}
